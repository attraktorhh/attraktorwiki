<?php
# ini_set('display_errors','On');
# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
$IP = "/var/webroot/wiki.attraktor.org";

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '32M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename         = "Attraktor Wiki";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "";
$wgScriptExtension  = ".php";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = false; # UPO

$wgEmergencyContact = "it@attraktor.org";
$wgPasswordSender = "no-reply@attraktor.org";


error_reporting( -1 );
ini_set( 'display_errors', 1 );
$wgShowExceptionDetails = true;

$wgSMTP = [
    'host'      => 'REDACTED_FOR_SECURITY',
    'IDHost'    => 'attraktor.org',
    'port'      => 587,
    'auth'      => true,
    'username'  => 'no-reply@attraktor.org',
    'password'  => 'REDACTED_FOR_SECURITY',
];

/*
error_reporting( -1 );
ini_set( 'display_errors', 1 );
$wgShowExceptionDetails = true;

$wgSMTP = [
    'host'      => 'tls://mail.attraktor.org', // If using SSL or TLS, add the prefix "ssl://" or "tls://".
    'IDHost'    => 'wiki.attraktor.org',      // Generally this will be the domain name of your website (aka mywiki.org)
    'localhost' => 'wiki.attraktor.org',      // Same as IDHost above; required by some mail servers
    'port'      => 465,
    'auth'      => true,
    'username'  => 'wiki@attraktor.org',
    'password'  => 'REDACTED_FOR_SECURITY'
];
*/



$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;
$wgEmailConfirmToEdit = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "REDACTED_FOR_SECURITY";
$wgDBname           = "attraktorwiki";
$wgDBuser           = "attraktorwiki";
$wgDBpassword       = "REDACTED_FOR_SECURITY";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

/* BEGIN DIRTY LANGUAGE HACK */
/*
 * We want to keep our old default english urls, but show german messages
 * to our users.
 * We keep the main wiki language set to english, but in a hook run very
 * early on each page we switch the language for non logged in users to
 * "de", re-creating the $wgLang and $wgMessageCache objects.
 *
 * What we would really want is simply:
 *   $wgDefaultUserOptions['language'] = "de";
 *   $wgDefaultUserOptions['variant'] = "de";
 * But these values get overwritten at object creation time with the site-
 * wide setting $wgLanguageCode which also affects site urls.
 * - haegar 2007.06.07
 */
function germanLanguageHack(&$auth)
{
  global $wgUser, $wgLang, $wgContLanguageCode, $wgContLang, $wgMessageCache;
  global $parserMemc, $wgUseDatabaseMessages, $wgMsgCacheExpiry;
  
  if (!$wgUser->isLoggedIn()) {
    if ( is_null( $wgUser->mOptions ) ) {
      $wgUser->mOptions = User::getDefaultOptions();
    }
    $wgUser->setOption( 'language', "de");
    $wgUser->setOption( 'variant', "de");
    $wgLang = new StubUserLang;
    
    $wgMessageCache = new StubObject( 'wgMessageCache', 'MessageCache',
      array( $parserMemc, $wgUseDatabaseMessages, $wgMsgCacheExpiry, wfWikiID() ) );
  }
  return true;
}
$wgHooks["AuthPluginSetup"][] = "germanLanguageHack";
/* END DIRTY LANGUAGE HACK */
$srfgFirstDayOfWeek = 'Montag';

$wgSecretKey = "REDACTED_FOR_SECURITY";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
//$wgDefaultSkin = 'monobook';
$wgDefaultSkin = 'attraktor';
require_once "$IP/skins/attraktor/Attraktor.php";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
#$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
#$wgRightsUrl = "";
#$wgRightsText = "";
#$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "http://creativecommons.org/licenses/by-nc-sa/3.0/";
$wgRightsText = "Attribution-NonCommercial-ShareAlike 3.0";
$wgRightsIcon = "http://creativecommons.org/images/public/somerights.png";
$wgFooterIcons['copyright']['copyright'] = "http://creativecommons.org/images/public/somerights.png";

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );


# OWN ADDITIONS FROM DEFAULTS
# ===========================

//$wgLogo = "/images/attraktor-h72.png";
$wgLogo = "/images/9/95/Attraktor_logo_klein.png";
$wgFavicon = "/favicon.png";

# This is the list of preferred extensions for uploading files. Uploading
# files with extensions not in this list will trigger a warning.
$wgFileExtensions = array( 'png', 'gif', 'jpg', 'jpeg', 'pdf', 'tgz', 'zip', 'gz', 'kml', 'kmz', 'csv', 'brd', 'sch', 'bmp', 'odt', 'svg', 'indd', 'dxf', 'stl' );

# If this is turned off, users may override the warning for files not
# covered by $wgFileExtensions.
$wgStrictFileExtensions = false;

/** Determines if the mime type of uploaded files should be checked */
$wgVerifyMimeType = false;

# Log IP addresses in the recentchanges table
$wgPutIPinRC = true;
$wgShowIPinHeader = false;

# User rights 
## (20070403 Hinnerk) DEPRECATED $wgWhitelistEdit = true;	# true = user must login to edit.
$wgGroupPermissions['*']['edit'] = false; # (20070403 Hinnerk) deny write to anonymous users

$wgGroupPermissions['*']['createaccount'] = false; #tmp disable, spammer


# (20070403 Hinnerk) these settings are still in use 1.9.3
$wgSysopUserBans = true;	# Allow sysops to ban logged-in users
$wgSysopRangeBans = true;	# Allow sysops to ban IP ranges

## (20070403 Hinnerk) This could be used to disable read for not logged in users
## $wgWhitelistRead = array("Main Page", "Special:Userlogin", "-", "MediaWiki:Monobook.css");
## $wgGroupPermissions['*']['read'] = false;

$wgRCMaxAge = 2 * 365 * 24 * 3600;
$wgCheckCopyrightUpload = false;

// weg 20070904-Hinnerk //require_once( "$IP/extensions/SpamBlacklist/SpamBlacklist.php" );
  // fixed version for large blocklists, larger than regular expressions allow

require_once( "$IP/extensions/ConfirmEdit-haegar/ConfirmEdit.php" );
$wgGroupPermissions['emailconfirmed']['skipcaptcha'] = true;
$ceAllowConfirmedEmail = true;

#$wgSpamBlacklistFiles = array(
#        "$IP/blocklists/wikimedia_blacklist", // Wikimedia's list
#        "$IP/blocklists/chongqed_blacklist",
#        "$IP/blocklists/haegar_blacklist",
#        //          database    title
#        //"DB: wikidb My_spam_blacklist",    
#        );

#$wgSpamRegex="/(<div|overflow:\s*auto)/";		# Old See line below.
// weg 20070904 Hinnerj// $wgSpamRegex = "/online-casino|buy-viagra|adipex|phentermine|adult-website\.com|display:none|div|overflow:\s*auto;\s*height:\s*[0-4]px;/i";

$wgUseAjax = true;
$wgAjaxSearch = true;
$wgAjaxWatch = true;
$wgEnableAPI = false; /* Enable direct access to the data API through api.php */
$wgEnableWriteAPI = false;

require_once( "$IP/extensions/NewUserNotif/NewUserNotif.php" );
$wgNewUserNotifTargets = array();
$wgNewUserNotifEmailTargets = array( "office@attraktor.org" );

#disabled mw1.22 ~fh
#require_once("$IP/extensions/EditUser/EditUser.php");
#$wgGroupPermissions['bureaucrat']['edituser'] = true;
#$wgGroupPermissions['sysop']['edituser'] = true;
#$wgGroupPermissions['sysop']['edituser-exempt'] = true;
#$wgEditUserDebug = false;
#$wgEditUserDebugLog = "$IP/extensions/EditUser/debug.log"; #optional, defaults to $IP/extensions/debug.log

require_once( "$IP/extensions/Lockdown/Lockdown.php" );
$wgSpecialPageLockdown['Export'] = array('sysop');
$wgActionLockdown['history'] = array('user');

$wgSecurityUseDBHook = true; # Add this to enable the experimental DB hook for stronger security
#require_once("$IP/extensions/SimpleSecurity/SimpleSecurity.php");
$wgSecurityRenderInfo = true;
$wgSecurityAllowUnreadableLinks = false;
#$wgPageRestrictions['Category:Servers']['read'] = 'staff';
#$wgPageRestrictions['Category:Our_people']['edit'] = array('sysop', 'management');
#$wgPageRestrictions['Namespace:Special']['read'] = 'user';
$wgPageRestrictions['Category:Useronly']['read'] = array('user');
$wgPageRestrictions['Category:Nonpublic']['read'] = array('sysop','bureaucrat');
$wgPageRestrictions['Category:Nonpublic']['edit'] = array('sysop','bureaucrat');
$wgSecurityExtraGroups = array(
  "attraktor"	=> "Attraktor Mitglied",
  "ssdev"	=> "SSD e.V.",
  );

$wgPageRestrictions['Template:DoorisStatus']['delete'] = array('bot','sysop','bureaucrat');
$wgPageRestrictions['Template:DoorisStatus']['bigdelete'] = array('bot','sysop','bureaucrat');

$wgGroupPermissions['bot']['delete'] = true;
$wgGroupPermissions['bot']['bigdelete'] = true;

/* only temp while debugging: */
#$wgShowExceptionDetails = true;

/* calender */
#require_once("$IP/extensions/Calendar/Calendar.php");

// Puts events into their own namesspace/group (not included in 'main' searches... etc)
#$wgExtraNamespaces[100] = "Calendars";
#$wgExtraNamespaces[101] = "Calendars_talk";
//Note: 'Calendars' is an example, please feel free to use whatever name you wish

// Puts the events into Subpages (allows a quick link back to primary calendar)
#$wgNamespacesWithSubpages[100] = true;
#$wgNamespacesWithSubpages[101] = true;

#$wgCalendarForceNamespace='Calendars';



if (!preg_match('/api\.php$/', $_SERVER['SCRIPT_NAME'])) {
	$wgArticlePath = "${wgScriptPath}/$1";
}


/* ==== VARIABLES EXTENSION ==== */
/*
$wgCustomVariables = array('CURRENTUSER','LOGO');
 
$wgHooks['MagicWordMagicWords'][]          = 'wfAddCustomVariable';
$wgHooks['MagicWordwgVariableIDs'][]       = 'wfAddCustomVariableID';
$wgHooks['LanguageGetMagic'][]             = 'wfAddCustomVariableLang';
$wgHooks['ParserGetVariableValueSwitch'][] = 'wfGetCustomVariable';

function wfAddCustomVariable(&$magicWords) {
	foreach($GLOBALS['wgCustomVariables'] as $var) $magicWords[] = "MAG_$var";
	return true;
	}
 
function wfAddCustomVariableID(&$variables) {
	foreach($GLOBALS['wgCustomVariables'] as $var) $variables[] = constant("MAG_$var");
	return true;
	}
 
function wfAddCustomVariableLang(&$langMagic, $langCode = 0) {
	foreach($GLOBALS['wgCustomVariables'] as $var) {
		$magic = "MAG_$var";
		$langMagic[defined($magic) ? constant($magic) : $magic] = array(0,$var);
		}
	return true;
	}
 
function wfGetCustomVariable(&$parser,&$cache,&$index,&$ret) {
	switch ($index) {
 
		case MAG_CURRENTUSER:
			$parser->disableCache(); # Mark this content as uncacheable
			$ret = $GLOBALS['wgUser']->mName;
			break;
 
		case MAG_LOGO:
			$ret = $GLOBALS['wgLogo'];
			break;
 
		}
	return true;
	}
*/
/* ==== END VARIABLES EXTENSION ==== */

#require_once( "$IP/extensions/DataValues/DataValues.php" );
require_once( "$IP/extensions/Validator/Validator.php" );
include_once( "$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php" );
enableSemantics('wiki.attraktor.org');
$wgAmericanDates = false;
$sfg24HourTime = true;
require_once( "$IP/extensions/SemanticResultFormats/SemanticResultFormats.php" );
$srfgFormats[] = 'eventline';
$srfgFormats[] = 'timeline'; 
include_once("$IP/extensions/SemanticForms/SemanticForms.php");
#$sfgYUIBase = "http://yui.yahooapis.com/2.7.0/build/";
$sfgYUIBase = "/yui-2.8.0r4/build/";
#$sfgCacheFormDefinitions = true;
$sfgRenameMainEditTab = true;
include_once("$IP/extensions/SemanticFormsInputs/SemanticFormsInputs.php");

require_once("$IP/extensions/Widgets/Widgets.php");
$wgGroupPermissions['bureaucrat']['editwidgets'] = true;
$wgGroupPermissions['sysop']['editwidgets'] = true;

# for sending the recent changes to Dooris
$wgRC2UDPAddress = '172.31.17.122';
$wgRC2UDPPort = 42234;
$wgRC2UDPPrefix = 'attraktor ';
$wgRC2UDPInterwikiPrefix = false;
$wgRC2UDPOmitBots = true;

$wgEnableAPI = true;
$wgEnableWriteAPI = true;

require_once("$IP/extensions/ImageMap/ImageMap.php");


##Start --------------------------------------- MsUpload
##if necessary
#$wgEnableWriteAPI = true; //API
#$wgEnableUploads = true; // Enable uploads
#$wgFileExtensions = array('png','gif','jpg','jpeg','doc','xls','mpp','pdf','ppt','tiff','bmp','docx', 'xlsx', 'pptx','ps','odt','ods','odp','odg');

$wgMSU_ShowAutoKat = false;     #autokategorisierung
$wgMSU_CheckedAutoKat = false;  #checkbox: checked = true/false
$wgMSU_debug = false;
require_once("$IP/extensions/MsUpload/msupload.php");
##End  --------------------------------------- MsUpload


# ShoogleList: Projektuebersicht
# this is now being done using composer
# include_once("$IP/extensions/ShoogleList/ShoogleList.php");

# ParserFunctions aktivieren (damit man if etc. benutzen kann)
require_once("$IP/extensions/ParserFunctions/ParserFunctions.php");

require_once ( "$IP/extensions/CheckUser/CheckUser.php" );
$wgCUDMaxAge = 2 * 365 * 24 * 3600;
$wgAddGroups['sysop'][] = 'checkuser';
$wgRemoveGroups['sysop'][] = 'checkuser';

# **FIXME**
# Not nice, but avoids thumbnail errors like
# convert: MemoryAllocationFailed `ableToGetCacheNexus/' @ error/locale.c/LoadLocaleList/931' @ fatal/hashmap.c/NewLinkedList/1411.
# and strangely blocked convert processes followed by mysql locking errors
$wgMaxShellTime = 0;
$wgMaxShellMemory = 0;
$wgMaxShellFileSize = 0;



# Debugging Only:
#$wgReadOnly = "Update in Progress";
#$wgShowExceptionDetails = true;
#$wgMemoryLimit = "128M";

# MediaWiki Piwik Integration extension
# require no longer needed since this is now being done using composer
# require_once("$IP/extensions/piwik/Piwik.php");
#$wgPiwikURL = "blog.attraktor.org/piwik/";
#$wgPiwikIDSite = "2";

$wgReadOnly = 'Dieses Wiki ist im Wartungsmodus, Anpassungen sind zur zeit nicht möglich.';
